[gd_scene load_steps=15 format=2]

[ext_resource path="res://resources/tiles/floor.tres" type="TileSet" id=1]
[ext_resource path="res://scenes/SaveController.gd" type="Script" id=2]
[ext_resource path="res://assets/EditorCam.gd" type="Script" id=3]
[ext_resource path="res://scenes/Editor.gd" type="Script" id=4]
[ext_resource path="res://scenes/TileSelector.gd" type="Script" id=5]
[ext_resource path="res://resources/tiles/entities.tres" type="TileSet" id=6]
[ext_resource path="res://resources/tiles/wall.tres" type="TileSet" id=7]

[sub_resource type="GDScript" id=1]
script/source = "extends ItemList

var ground: TileSet = preload(\"res://resources/tiles/floor.tres\")
var selected_tiles = [0, 1]

signal blend(tile_array)

func _ready() -> void:
	for id in ground.get_tiles_ids():
		var tile_name = ground.tile_get_name(id)
		if tile_name.find(\"_var\") == -1 and tile_name.find(\"_blend\") == -1:
			if tile_name.match(\"start\") or tile_name.match(\"hole\"):
				continue
			var tile_texture = ground.tile_get_texture(id)
			add_item(ground.tile_get_name(id).capitalize(), tile_texture)


func multi_select(index: int, selected: bool) -> void:
	var selection = get_selected_items()
	if selection.size() > 3:
		unselect(selection[-1])
	emit_signal(\"blend\", get_selected_items())
"

[sub_resource type="GDScript" id=2]
script/source = "extends ItemList

var ground: TileSet = preload(\"res://resources/tiles/floor.tres\")
onready var base_tiles: Array = [\"grass\", \"green\", \"water\", \"acid\", \"mud\", \"deepmud\"]
var blend_one
var blend_two
var blend_three
var first_variant_index

signal tile_selection(id)

func populate(tile_array : PoolIntArray):
	clear()
	if tile_array.size() == 2:
		visible = true
		
		# Sort blend tiles numerically for ease
		var sorted_array = Array(tile_array)
		sorted_array.sort()
		blend_one = sorted_array[0]
		blend_two = sorted_array[1]
		blend_three = null
		
		# Populate from tileset
		for id in ground.get_tiles_ids():
			var search = base_tiles[blend_one] + \"_\" + base_tiles[blend_two] + \"_blend\"
			var tile_name = ground.tile_get_name(id)
			if tile_name.begins_with(search):
				if tile_name.ends_with(\"1\"):
					first_variant_index = id
				var tile_texture = ground.tile_get_texture(id)
				add_icon_item(tile_texture)
	elif tile_array.size() == 3:
		visible = true
		
		# Sort blend tiles numerically for ease
		var sorted_array = Array(tile_array)
		sorted_array.sort()
		blend_one = sorted_array[0]
		blend_two = sorted_array[1]
		blend_three = sorted_array[2]
		
		# Populate from tileset
		for id in ground.get_tiles_ids():
			var search = base_tiles[blend_one] + \"_\" + base_tiles[blend_two] + \"_\" + base_tiles[blend_three] + \"_blend\"
			var tile_name = ground.tile_get_name(id)
			if tile_name.begins_with(search):
				if tile_name.ends_with(\"1\"):
					first_variant_index = id
				var tile_texture = ground.tile_get_texture(id)
				add_icon_item(tile_texture)
	else:	# Nothing selected
		blend_one = tile_array[0]
		blend_two = null
		blend_three = null
		if blend_one == 0:  # Grass
			visible = true
			# Get start tile
			for id in ground.get_tiles_ids():
				var tile_name = ground.tile_get_name(id)
				if tile_name == \"start\":
					first_variant_index = id
					var tile_texture = ground.tile_get_texture(id)
					add_icon_item(tile_texture)
		elif blend_one == 1:  # Green
			visible = true
			# Get hole tile
			for id in ground.get_tiles_ids():
				var tile_name = ground.tile_get_name(id)
				if tile_name == \"hole\":
					first_variant_index = id
					var tile_texture = ground.tile_get_texture(id)
					add_icon_item(tile_texture)
		else:
			visible = false
			first_variant_index = null
		
		emit_signal(\"tile_selection\", blend_one * 4)


func _on_TileVariant_item_selected(index: int) -> void:
	emit_signal(\"tile_selection\", first_variant_index + index)
"

[sub_resource type="GDScript" id=3]
script/source = "extends ItemList

var walls = preload(\"res://resources/tiles/wall.tres\")

func _ready() -> void:
	for id in walls.get_tiles_ids():
		var tile_texture = walls.tile_get_texture(id)
		add_icon_item(tile_texture)
"

[sub_resource type="GDScript" id=4]
script/source = "extends ItemList

var entities = preload(\"res://resources/tiles/entities.tres\")

func _ready() -> void:
	for id in entities.get_tiles_ids():
		var tile_texture = entities.tile_get_texture(id)
		add_item(entities.tile_get_name(id).capitalize(), tile_texture)
"

[sub_resource type="GDScript" id=5]
script/source = "extends TileMap

func save():
	var save_dict = {
	\"ground_cells_used\" : get_used_cells(),
	\"ground_cells_ids\" : [],
	\"ground_cells_rotation\" : []
	}
	# Save tile id's
	for key in save_dict:
		if key == \"ground_cells_used\":
			var used_array = save_dict.get(key)
			for tile in used_array:
				var id = get_cellv(tile)
				save_dict[\"ground_cells_ids\"].append(id)
				var transpose : bool = is_cell_transposed(tile.x, tile.y)
				var y_flip : bool = is_cell_y_flipped(tile.x, tile.y)
				var x_flip : bool = is_cell_x_flipped(tile.x, tile.y)
				save_dict[\"ground_cells_rotation\"].append([transpose, y_flip, x_flip])

	return save_dict
"

[sub_resource type="GDScript" id=6]
script/source = "extends TileMap

func save():
	var save_dict = {
	\"wall_cells_used\" : get_used_cells(),
	\"wall_cells_ids\" : [],
	\"wall_cells_rotation\" : []
	}
	# Save tile id's
	for key in save_dict:
		if key == \"wall_cells_used\":
			var used_array = save_dict.get(key)
			for tile in used_array:
				var id = get_cellv(tile)
				save_dict[\"wall_cells_ids\"].append(id)
				var transpose : bool = is_cell_transposed(tile.x, tile.y)
				var y_flip : bool = is_cell_y_flipped(tile.x, tile.y)
				var x_flip : bool = is_cell_x_flipped(tile.x, tile.y)
				save_dict[\"wall_cells_rotation\"].append([transpose, y_flip, x_flip])

	return save_dict
"

[sub_resource type="GDScript" id=7]
script/source = "extends TileMap

func save():
	var save_dict = {
	\"entity_cells_used\" : get_used_cells(),
	\"entity_cells_ids\" : [],
	\"entity_cells_rotation\" : []
	}
	# Save tile id's
	for key in save_dict:
		if key == \"entity_cells_used\":
			var used_array = save_dict.get(key)
			for tile in used_array:
				var id = get_cellv(tile)
				save_dict[\"entity_cells_ids\"].append(id)
				var transpose : bool = is_cell_transposed(tile.x, tile.y)
				var y_flip : bool = is_cell_y_flipped(tile.x, tile.y)
				var x_flip : bool = is_cell_x_flipped(tile.x, tile.y)
				save_dict[\"entity_cells_rotation\"].append([transpose, y_flip, x_flip])

	return save_dict
"

[node name="Editor" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_default_cursor_shape = 3
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 2

[node name="TileSelector" type="PanelContainer" parent="CanvasLayer"]
anchor_left = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -280.0
size_flags_horizontal = 3
script = ExtResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/TileSelector"]
margin_left = 7.0
margin_top = 7.0
margin_right = 273.0
margin_bottom = 761.0

[node name="TabContainer" type="TabContainer" parent="CanvasLayer/TileSelector/VBoxContainer"]
margin_right = 266.0
margin_bottom = 706.0
size_flags_horizontal = 3
size_flags_vertical = 3
use_hidden_tabs_for_min_size = true

[node name="Ground" type="VSplitContainer" parent="CanvasLayer/TileSelector/VBoxContainer/TabContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 32.0
margin_right = -4.0
margin_bottom = -4.0
size_flags_horizontal = 3

[node name="BaseTile" type="ItemList" parent="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground"]
margin_right = 258.0
margin_bottom = 329.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/vseparation = 10
custom_constants/hseparation = 10
select_mode = 1
icon_scale = 2.0
script = SubResource( 1 )

[node name="TileVariant" type="ItemList" parent="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground"]
margin_top = 341.0
margin_right = 258.0
margin_bottom = 670.0
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/vseparation = 10
custom_constants/line_separation = 10
custom_constants/icon_margin = 10
custom_constants/hseparation = 10
allow_reselect = true
max_columns = 4
same_column_width = true
icon_scale = 3.0
script = SubResource( 2 )

[node name="Walls" type="ItemList" parent="CanvasLayer/TileSelector/VBoxContainer/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 32.0
margin_right = -4.0
margin_bottom = -4.0
custom_constants/vseparation = 10
custom_constants/line_separation = 10
custom_constants/icon_margin = 10
custom_constants/hseparation = 10
allow_reselect = true
max_columns = 4
same_column_width = true
icon_scale = 3.0
script = SubResource( 3 )

[node name="Entities" type="ItemList" parent="CanvasLayer/TileSelector/VBoxContainer/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 4.0
margin_top = 32.0
margin_right = -4.0
margin_bottom = -4.0
allow_reselect = true
max_columns = 4
same_column_width = true
fixed_icon_size = Vector2( 48, 48 )
script = SubResource( 4 )

[node name="VBoxContainer" type="VBoxContainer" parent="CanvasLayer/TileSelector/VBoxContainer"]
margin_top = 710.0
margin_right = 266.0
margin_bottom = 754.0
size_flags_horizontal = 3

[node name="Load" type="Button" parent="CanvasLayer/TileSelector/VBoxContainer/VBoxContainer"]
margin_right = 266.0
margin_bottom = 20.0
text = "Load"

[node name="Save" type="Button" parent="CanvasLayer/TileSelector/VBoxContainer/VBoxContainer"]
margin_top = 24.0
margin_right = 266.0
margin_bottom = 44.0
text = "Save"

[node name="Level" type="Node2D" parent="."]

[node name="Ground" type="TileMap" parent="Level" groups=[
"save",
]]
tile_set = ExtResource( 1 )
cell_size = Vector2( 16, 16 )
format = 1
script = SubResource( 5 )

[node name="Walls" type="TileMap" parent="Level" groups=[
"save",
]]
tile_set = ExtResource( 7 )
cell_size = Vector2( 16, 16 )
format = 1
script = SubResource( 6 )

[node name="Entities" type="TileMap" parent="Level" groups=[
"save",
]]
tile_set = ExtResource( 6 )
cell_size = Vector2( 8, 8 )
format = 1
script = SubResource( 7 )

[node name="Mouse" type="Sprite" parent="."]
self_modulate = Color( 1, 1, 1, 0.501961 )

[node name="Camera2D" type="Camera2D" parent="."]
anchor_mode = 0
current = true
limit_left = 0
limit_top = 0
limit_right = 2048
limit_bottom = 1024
script = ExtResource( 3 )

[node name="SaveController" type="Node" parent="."]
script = ExtResource( 2 )
[connection signal="tile_selected" from="CanvasLayer/TileSelector" to="." method="_on_TileSelector_tile_selected"]
[connection signal="tab_changed" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer" to="." method="_on_TabContainer_tab_changed"]
[connection signal="blend" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/BaseTile" to="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/TileVariant" method="populate"]
[connection signal="multi_selected" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/BaseTile" to="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/BaseTile" method="multi_select"]
[connection signal="item_selected" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/TileVariant" to="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/TileVariant" method="_on_TileVariant_item_selected"]
[connection signal="nothing_selected" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/TileVariant" to="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/TileVariant" method="nothing_selected"]
[connection signal="tile_selection" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Ground/TileVariant" to="CanvasLayer/TileSelector" method="ground_tile_selected"]
[connection signal="item_selected" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Walls" to="CanvasLayer/TileSelector" method="_on_Walls_item_selected"]
[connection signal="item_selected" from="CanvasLayer/TileSelector/VBoxContainer/TabContainer/Entities" to="CanvasLayer/TileSelector" method="_on_Entities_item_selected"]
[connection signal="pressed" from="CanvasLayer/TileSelector/VBoxContainer/VBoxContainer/Load" to="SaveController" method="load_scene"]
[connection signal="pressed" from="CanvasLayer/TileSelector/VBoxContainer/VBoxContainer/Save" to="SaveController" method="save_scene"]
